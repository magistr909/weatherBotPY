from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

from weather import fetch_open_meteo, fetch_weatherapi, fetch_visual_crossing, aggregate_all
import json

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===
with open("config.json", "r", encoding="utf-8") as f:
    CONFIG = json.load(f)

BOT_TOKEN = CONFIG["telegram_bot_token"]

# === –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_state = {}

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑", callback_data="type_hourly")],
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞", callback_data="type_summary")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ ===
async def choose_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_state[query.from_user.id] = {"type": query.data}

    keyboard = [
        [InlineKeyboardButton("1 —á–∞—Å", callback_data="interval_1")],
        [InlineKeyboardButton("3 —á–∞—Å–∞", callback_data="interval_3")],
        [InlineKeyboardButton("6 —á–∞—Å–æ–≤", callback_data="interval_6")],
        [InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data="interval_12")],
        [InlineKeyboardButton("–°—É—Ç–∫–∏", callback_data="interval_24")],
        [InlineKeyboardButton("3 –¥–Ω—è", callback_data="interval_72")],
        [InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="interval_168")]
    ]
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ===
async def choose_source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    hours = int(query.data.split("_")[1])
    user_state[query.from_user.id]["hours"] = hours

    keyboard = [
        [InlineKeyboardButton("–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="source_all")],
        [InlineKeyboardButton("Open-Meteo", callback_data="source_openmeteo")],
        [InlineKeyboardButton("WeatherAPI", callback_data="source_weatherapi")],
        [InlineKeyboardButton("Visual Crossing", callback_data="source_visualcrossing")]
    ]
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏ –∏—Å—Ç–æ—á–Ω–∏–∫:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
async def show_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    source = query.data
    state = user_state[query.from_user.id]

    start_date = datetime.utcnow()
    end_date = start_date + timedelta(hours=state["hours"])

    summaries = []

    if source == "source_openmeteo":
        summaries.append(fetch_open_meteo())
    elif source == "source_weatherapi":
        summaries.append(fetch_weatherapi())
    elif source == "source_visualcrossing":
        summaries.append(fetch_visual_crossing())
    else:
        summaries.extend([
            fetch_open_meteo(),
            fetch_weatherapi(),
            fetch_visual_crossing()
        ])
        summaries = [s for s in summaries if s]

    if state["type"] == "type_summary" and len(summaries) > 1:
        summaries.append(aggregate_all(summaries))

    text = f"–ü–æ–≥–æ–¥–∞ —Å {start_date:%Y-%m-%d %H:%M} –ø–æ {end_date:%Y-%m-%d %H:%M} UTC\n\n"
    for s in summaries:
        text += (
            f"üåç {s['source']}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {s['avg_temp']:.1f}¬∞C (min {s['min_temp']:.1f}¬∞C / max {s['max_temp']:.1f}¬∞C)\n"
            f"–í–µ—Ç–µ—Ä: {s['avg_wind']:.1f} –º/—Å\n"
            f"–û—Å–∞–¥–∫–∏: {s['avg_rain']:.0f}%\n"
            f"–£—Å–ª–æ–≤–∏—è: {', '.join(s['conditions'])}\n\n"
        )

    await query.edit_message_text(text)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(choose_interval, pattern="^type_"))
    app.add_handler(CallbackQueryHandler(choose_source, pattern="^interval_"))
    app.add_handler(CallbackQueryHandler(show_weather, pattern="^source_"))

    app.run_polling()

if __name__ == "__main__":
    main()
